{"version":3,"sources":["shared/components/logo.svg","navigation/components/NavigationHeader.tsx","core/components/Page.tsx","shared/components/Logo.tsx","core/components/WelcomePage.tsx","state/util/action-helpers.util.ts","state/actions/navigation.actions.ts","state/constants/state.interface.ts","state/constants/initial-state.constant.ts","state/reducers/index.ts","state/reducers/navigation.reducer.ts","state/sagas/navigation.sagas.ts","state/sagas/index.ts","state/index.ts","navigation/components/NavigationSections.tsx","App.tsx","serviceWorker.js","i18n/index.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","NavigationHeader","react_default","a","createElement","className","build","value","Page","_ref","children","role","Logo","src","logo","alt","WelcomePage","title","Logo_Logo","reactstrap_es","top","width","color","createAction","type","payload","Section","SetNavigationSectionType","SetNavigationSection","section","DetermineNavigationSectionType","DetermineNavigationSection","InitialAppState","navigation","Welcome","RootReducer","combineReducers","state","arguments","length","undefined","action","NavigationActions","Object","objectSpread","logOnNavigateSaga","regenerator_default","mark","wrap","_context","prev","next","put","stop","this","NavigationSagas","takeEvery","RootSaga","all","toConsumableArray","_marked","composeEnhancers","window","compose","SECTIONS","Transport","_NavigationSections","_this$props","props","activeSection","setSection","tabs","map","key","classnames","active","onClick","React","Component","NavigationSections","connect","dispatch","bindActionCreators","App","document","I18n","t","Fragment","NavigationHeader_NavigationHeader","Page_Page","WelcomePage_WelcomePage","Boolean","location","hostname","match","language","en","require","pl","setTranslations","setLocale","configureI18n","ReactDOM","render","es","store","sagaMiddleware","createSagaMiddleware","createStore","applyMiddleware","runSagaTask","sagaTask","run","configureStore","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9dd7e56f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport { Translate } from 'react-i18nify';\n\nexport const NavigationHeader = () => (\n    <header>\n        <nav className=\"navbar navbar-expand-md navbar-dark fixed-top bg-primary\">\n            <span className=\"navbar-brand\">\n                <Translate value=\"application.title\" />\n            </span>\n        </nav>\n    </header>\n);","import React from 'react';\n\nexport const Page = ({ children }) => (\n    <main role=\"main\" className=\"container\">\n        {children}\n    </main>\n);","import React from 'react';\nimport logo from './logo.svg';\nimport './logo.scss';\n\nexport const Logo = () => <img src={logo} className=\"App-logo\" alt=\"logo\" />;","import React from 'react';\nimport { Logo } from '../../shared/components/Logo';\nimport { Translate } from 'react-i18nify';\nimport { Card, CardImg, CardText, CardBody, CardTitle, CardSubtitle, Button } from 'reactstrap';\n\nexport const WelcomePage = ({ title }) => (\n    <div className=\"row\">\n        <div className=\"col-12 col-md-6 d-flex justify-content-center align-items-center\">\n            <Logo />\n        </div>\n        <div className=\"col-12 col-md-6 d-flex align-items-center\">\n            <Card>\n                <CardImg top width=\"100%\" src=\"https://picsum.photos/318/180\" alt=\"Card image cap\" />\n                <CardBody>\n                    <CardTitle>{ title || 'Default title' }</CardTitle>\n                    <CardSubtitle>This is a subtitle...</CardSubtitle>\n                    <CardText>THE best example text to build on the card title and make up the bulk of the card's content.</CardText>\n                    <Button color=\"info\">\n                        <Translate value=\"actions.calculateUsage\" />\n                    </Button>\n                </CardBody>\n            </Card>\n        </div>\n    </div>\n);","export interface TypedAction<T, P> {\n    readonly type: T;\n    readonly payload?: P;\n}\n\nexport function createAction<T extends string, P>(type: T, payload?: P): TypedAction<T, P> {\n    return { type, payload };\n}","import { createAction } from '../util';\nimport { Section } from '../constants';\n\nexport type ActionsTypes = SetNavigationSectionAction;\n\nexport const SetNavigationSectionType = '[NAVIGATION] SetNavigationSection';\nexport type SetNavigationSectionAction = ReturnType<typeof SetNavigationSection>;\nexport const SetNavigationSection = (section: Section) => createAction(SetNavigationSectionType, section);\n\nexport const DetermineNavigationSectionType = '[NAVIGATION] DetermineNavigationSection';\nexport type DetermineNavigationSectionAction = ReturnType<typeof DetermineNavigationSection>;\nexport const DetermineNavigationSection = () => createAction(DetermineNavigationSectionType);","export enum Section {\n    None = 'NONE',\n    Welcome = 'WELCOME',\n    Transport = 'TRANSPORT'\n}\n\nexport interface NavigationState {\n    section: Section;\n}\n\nexport interface AppState {\n    navigation: NavigationState;\n}","import { AppState, Section } from \"./state.interface\";\n\nexport const InitialAppState: AppState = {\n    navigation: {\n        section: Section.Welcome\n    }\n}","import { combineReducers } from 'redux';\nimport { NavigationReducer } from './navigation.reducer';\n\nexport const RootReducer = combineReducers({\n    navigation: NavigationReducer\n});","import { NavigationActions } from '../actions';\nimport { InitialAppState, NavigationState } from '../constants';\n\nexport const NavigationReducer = (state: NavigationState = InitialAppState.navigation, action: NavigationActions.ActionsTypes): NavigationState => {\n    switch (action.type) {\n        case NavigationActions.SetNavigationSectionType:\n            return { ...state, section: action.payload };\n        default:\n            return state;\n    }\n};","import { takeEvery, put } from 'redux-saga/effects';\nimport { NavigationActions } from '../actions';\n\nexport const logOnNavigateSaga = function* (action: NavigationActions.SetNavigationSectionAction) {\n    yield put(NavigationActions.DetermineNavigationSection());\n};\n\nexport const NavigationSagas = [\n    takeEvery(NavigationActions.SetNavigationSectionType, logOnNavigateSaga)\n];","import { all } from 'redux-saga/effects';\nimport { NavigationSagas } from './navigation.sagas';\n\nexport function* RootSaga() {\n    yield all([\n        ...NavigationSagas\n    ]);\n}","export * from './actions';\nexport * from './constants';\n\nimport { applyMiddleware, compose, createStore, Store } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { AppState, InitialAppState } from './constants';\nimport { RootReducer } from './reducers';\nimport { RootSaga } from './sagas';\n\nconst composeEnhancers = (window as any)['__REDUX_DEVTOOLS_EXTENSION_COMPOSE__'] || compose;\n\nexport const configureStore = (initialState: AppState = InitialAppState): Store<AppState> => {\n    const sagaMiddleware = createSagaMiddleware();\n\n    const store: any = createStore(RootReducer, composeEnhancers(applyMiddleware(sagaMiddleware)));\n\n    store.runSagaTask = () => (store.sagaTask = sagaMiddleware.run(RootSaga as any));\n\n    store.runSagaTask();\n\n    return store;\n};","import React from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { AppState, NavigationActions, Section } from '../../state';\nimport { TabContent, TabPane, Nav, NavItem, NavLink, Card, Button, CardTitle, CardText, Row, Col } from 'reactstrap';\nimport classnames from 'classnames'\n\nconst SECTIONS = [Section.Welcome, Section.Transport];\n\nclass _NavigationSections extends React.Component<any> {\n    render() {\n        const { activeSection, setSection } = this.props;\n        return (\n            <Nav tabs className=\"mt-5\">\n                {\n                    SECTIONS.map(section => (\n                        <NavItem key={section}>\n                            <NavLink\n                                className={classnames({ active: activeSection === section })}\n                                onClick={() => setSection(section)}>\n                                {section}\n                            </NavLink>\n                        </NavItem>\n                    ))\n                }\n            </Nav>\n        );\n    }\n}\n\nfunction mapStateToProps({ navigation }: AppState) {\n    return {\n        activeSection: navigation.section\n    };\n};\n\nfunction mapDispatchToProps(dispatch: any) {\n    return bindActionCreators(\n        {\n            setSection: NavigationActions.SetNavigationSection\n        },\n        dispatch\n    );\n}\n\nexport const NavigationSections = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(_NavigationSections);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { I18n } from 'react-i18nify';\n\nimport './style/style.scss';\n\nimport { NavigationHeader } from './navigation/components/NavigationHeader';\nimport { Page } from './core/components/Page';\nimport { WelcomePage } from './core/components/WelcomePage';\nimport { NavigationSections } from './navigation/components/NavigationSections';\n\nclass App extends Component {\n    componentDidMount() {\n        document.title = I18n.t('application.title');\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <NavigationHeader />\n                <Page>\n                    <NavigationSections />\n                    <WelcomePage title={I18n.t('application.title')} />\n                </Page>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default connect()(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { I18n } from 'react-i18nify';\n\nexport function configureI18n(language: string) {\n    const en = require('./languages/en.json');\n    const pl = require('./languages/pl.json');\n    \n    I18n.setTranslations({ en, pl });\n    \n    I18n.setLocale(language);\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { configureI18n } from './i18n';\nimport { configureStore } from './state';\nimport { Provider } from 'react-redux';\n\nconfigureI18n('pl');\n\nReactDOM.render(<Provider store={configureStore()}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}