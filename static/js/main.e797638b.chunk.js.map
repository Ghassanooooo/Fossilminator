{"version":3,"sources":["fossil-usage/usage-calculator.ts","shared/components/logo.svg","fossil-usage/index.ts","navigation/components/NavigationHeader.tsx","core/components/Page.tsx","shared/components/Logo.tsx","core/components/WelcomePage.tsx","state/util/action-helpers.util.ts","state/actions/navigation.actions.ts","state/constants/state.interface.ts","state/actions/fossil-usage.actions.ts","state/actions/fossil-emission.actions.ts","state/constants/initial-state.constant.ts","state/reducers/index.ts","state/reducers/navigation.reducer.ts","state/reducers/fossil-usage.reducer.ts","state/reducers/fossil-emission.reducer.ts","state/sagas/navigation.sagas.ts","state/sagas/fossil-emission.sagas.ts","state/sagas/index.ts","state/index.ts","navigation/components/EmissionsChart.tsx","navigation/components/NavigationSections.tsx","App.tsx","serviceWorker.js","i18n/index.ts","index.tsx"],"names":["__webpack_require__","d","__webpack_exports__","calculateFossilEmissions","WEEKS_PER_YEAR","CO2_EMISSION_PER_KM","input","transport","carKmPerWeek","consumption","result","module","exports","p","_usage_calculator__WEBPACK_IMPORTED_MODULE_0__","NavigationHeader","react_default","a","createElement","className","build","value","Page","_ref","children","role","Logo","src","logo","alt","WelcomePage","title","Logo_Logo","reactstrap_es","top","width","color","createAction","type","payload","Section","SetNavigationSectionType","SetNavigationSection","section","DetermineNavigationSectionType","DetermineNavigationSection","PatchTransportUsageType","PatchTransportUsage","ComputeFossilEmissionsType","ComputeFossilEmissions","SetFossilEmissionsResultType","SetFossilEmissionsResult","emissions","InitialAppState","navigation","Welcome","fossilUsage","fossilEmission","RootReducer","combineReducers","state","arguments","length","undefined","action","NavigationActions","Object","objectSpread","FossilUsageActions","FossilEmissionActions","logOnNavigateSaga","regenerator_default","mark","wrap","_context","prev","next","put","stop","this","NavigationSagas","takeEvery","computeFossilEmissionSaga","usage","emission","select","sent","FossilEmissionSagas","RootSaga","all","toConsumableArray","concat","_marked","composeEnhancers","window","compose","EmissionsChart","limit","label","transportPerc","consumptionPerc","style","height","Math","round","backgroundColor","SECTIONS","Transport","_NavigationSections","_this$props","props","activeSection","setSection","patchTransportUsage","refEmissions","maxEmission","max","Fragment","tabs","map","key","classnames","active","onClick","addonType","placeholder","step","onChange","event","currentTarget","EmissionsChart_EmissionsChart","React","Component","NavigationSections","connect","dispatch","bindActionCreators","App","document","I18n","t","NavigationHeader_NavigationHeader","Page_Page","WelcomePage_WelcomePage","Boolean","location","hostname","match","language","en","require","pl","setTranslations","setLocale","configureI18n","ReactDOM","render","es","store","sagaMiddleware","createSagaMiddleware","createStore","applyMiddleware","runSagaTask","sagaTask","run","configureStore","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e797638b.chunk.js","sourcesContent":["import { FossilUsageParams } from \"./types/fossil-usage-input.interface\";\nimport { FossilUsageResult } from \"./types/fossil-usage-result.interface\";\n\nconst WEEKS_PER_YEAR = 52;\nconst CO2_EMISSION_PER_KM = 0.001;\n\nexport function calculateFossilEmissions(input: FossilUsageParams): FossilUsageResult {\n    const consumption = 5;\n    const transport = input.transport.carKmPerWeek * WEEKS_PER_YEAR * CO2_EMISSION_PER_KM;\n\n    return {\n        consumption,\n        transport,\n        result: consumption + transport\n    };\n};","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export * from './usage-calculator';\nexport * from './types/fossil-usage-input.interface';\nexport * from './types/fossil-usage-result.interface';","import React from 'react';\nimport { Translate } from 'react-i18nify';\n\nexport const NavigationHeader = () => (\n    <header>\n        <nav className=\"navbar navbar-expand-md navbar-dark fixed-top bg-primary\">\n            <span className=\"navbar-brand\">\n                <Translate value=\"application.title\" />\n            </span>\n        </nav>\n    </header>\n);","import React from 'react';\n\nexport const Page = ({ children }) => (\n    <main role=\"main\" className=\"container\">\n        {children}\n    </main>\n);","import React from 'react';\nimport logo from './logo.svg';\nimport './logo.scss';\n\nexport const Logo = () => <img src={logo} className=\"App-logo\" alt=\"logo\" />;","import React from 'react';\nimport { Logo } from '../../shared/components/Logo';\nimport { Translate } from 'react-i18nify';\nimport { Card, CardImg, CardText, CardBody, CardTitle, CardSubtitle, Button } from 'reactstrap';\n\nexport const WelcomePage = ({ title }) => (\n    <div className=\"row\">\n        <div className=\"col-12 col-md-6 d-flex justify-content-center align-items-center\">\n            <Logo />\n        </div>\n        <div className=\"col-12 col-md-6 d-flex align-items-center\">\n            <Card>\n                <CardImg top width=\"100%\" src=\"https://picsum.photos/318/180\" alt=\"Card image cap\" />\n                <CardBody>\n                    <CardTitle>{ title || 'Default title' }</CardTitle>\n                    <CardSubtitle>This is a subtitle...</CardSubtitle>\n                    <CardText>THE best example text to build on the card title and make up the bulk of the card's content.</CardText>\n                    <Button color=\"info\">\n                        <Translate value=\"actions.calculateUsage\" />\n                    </Button>\n                </CardBody>\n            </Card>\n        </div>\n    </div>\n);","export interface TypedAction<T, P> {\n    readonly type: T;\n    readonly payload?: P;\n}\n\nexport function createAction<T extends string, P>(type: T, payload?: P): TypedAction<T, P> {\n    return { type, payload };\n}","import { createAction } from '../util';\nimport { Section } from '../constants';\n\nexport type ActionsTypes = SetNavigationSectionAction | DetermineNavigationSectionAction;\n\nexport const SetNavigationSectionType = '[NAVIGATION] SetNavigationSection';\nexport type SetNavigationSectionAction = ReturnType<typeof SetNavigationSection>;\nexport const SetNavigationSection = (section: Section) => createAction(SetNavigationSectionType, section);\n\nexport const DetermineNavigationSectionType = '[NAVIGATION] DetermineNavigationSection';\nexport type DetermineNavigationSectionAction = ReturnType<typeof DetermineNavigationSection>;\nexport const DetermineNavigationSection = () => createAction(DetermineNavigationSectionType);","import { FossilUsageParams, FossilUsageResult } from \"../../fossil-usage\";\n\nexport enum Section {\n    None = 'NONE',\n    Welcome = 'WELCOME',\n    Transport = 'TRANSPORT'\n}\n\nexport interface NavigationState {\n    section: Section;\n}\n\nexport type FossilUsageState = FossilUsageParams;\nexport type FossilEmissionState = FossilUsageResult;\n\nexport interface AppState {\n    navigation: NavigationState;\n    fossilUsage: FossilUsageState;\n    fossilEmission: FossilEmissionState;\n}","import { createAction } from '../util';\nimport { FossilUsageTransport } from '../../fossil-usage';\n\nexport type ActionsTypes = PatchTransportUsageAction;\n\nexport const PatchTransportUsageType = '[FOSSIL_USAGE] PatchTransportUsage';\nexport type PatchTransportUsageAction = ReturnType<typeof PatchTransportUsage>;\nexport const PatchTransportUsage = (transport: FossilUsageTransport) => createAction(PatchTransportUsageType, transport);","import { createAction } from '../util';\nimport { FossilEmissionState } from '../constants';\n\nexport type ActionsTypes = ComputeFossilEmissionsAction | SetFossilEmissionsResultAction;\n\nexport const ComputeFossilEmissionsType = '[FOSSIL_EMISSIONS] ComputeFossilEmissions';\nexport type ComputeFossilEmissionsAction = ReturnType<typeof ComputeFossilEmissions>;\nexport const ComputeFossilEmissions = () => createAction(ComputeFossilEmissionsType);\n\nexport const SetFossilEmissionsResultType = '[FOSSIL_EMISSIONS] SetFossilEmissionsResult';\nexport type SetFossilEmissionsResultAction = ReturnType<typeof SetFossilEmissionsResult>;\nexport const SetFossilEmissionsResult = (emissions: FossilEmissionState) => createAction(SetFossilEmissionsResultType, emissions);","import { AppState, Section } from \"./state.interface\";\n\nexport const InitialAppState: AppState = {\n    navigation: {\n        section: Section.Welcome\n    },\n    fossilUsage: {\n        transport: {\n            carKmPerWeek: 0\n        }\n    },\n    fossilEmission: {\n        consumption: 0,\n        transport: 0,\n        result: 0\n    }\n}","import { combineReducers } from 'redux';\nimport { NavigationReducer } from './navigation.reducer';\nimport { FossilUsageReducer } from './fossil-usage.reducer';\nimport { FossilEmissionReducer } from './fossil-emission.reducer';\n\nexport const RootReducer = combineReducers({\n    navigation: NavigationReducer,\n    fossilUsage: FossilUsageReducer,\n    fossilEmission: FossilEmissionReducer\n});","import { NavigationActions } from '../actions';\nimport { InitialAppState, NavigationState } from '../constants';\n\nexport const NavigationReducer = (state: NavigationState = InitialAppState.navigation, action: NavigationActions.ActionsTypes): NavigationState => {\n    switch (action.type) {\n        case NavigationActions.SetNavigationSectionType:\n            return { ...state, section: action.payload };\n        default:\n            return state;\n    }\n};","import { FossilUsageActions } from '../actions';\nimport { InitialAppState, FossilUsageState } from '../constants';\n\nexport const FossilUsageReducer = (state: FossilUsageState = InitialAppState.fossilUsage, action: FossilUsageActions.ActionsTypes): FossilUsageState => {\n    switch (action.type) {\n        case FossilUsageActions.PatchTransportUsageType:\n            return { ...state, transport: { ...state.transport, ...action.payload } };\n        default:\n            return state;\n    }\n};","import { FossilEmissionActions } from '../actions';\nimport { InitialAppState, FossilEmissionState } from '../constants';\n\nexport const FossilEmissionReducer = (state: FossilEmissionState = InitialAppState.fossilEmission, action: FossilEmissionActions.ActionsTypes): FossilEmissionState => {\n    switch (action.type) {\n        case FossilEmissionActions.SetFossilEmissionsResultType:\n            return { ...state, ...action.payload };\n        default:\n            return state;\n    }\n};","import { takeEvery, put } from 'redux-saga/effects';\nimport { NavigationActions } from '../actions';\n\nexport const logOnNavigateSaga = function* (action: NavigationActions.SetNavigationSectionAction) {\n    yield put(NavigationActions.DetermineNavigationSection());\n};\n\nexport const NavigationSagas = [\n    takeEvery(NavigationActions.SetNavigationSectionType, logOnNavigateSaga)\n];","import { takeEvery, put, select } from 'redux-saga/effects';\nimport { FossilEmissionActions, FossilUsageActions } from '../actions';\nimport { AppState } from '../constants';\nimport { calculateFossilEmissions } from '../../fossil-usage';\n\nexport const computeFossilEmissionSaga = function*() {\n    const usage = yield select<AppState>(state => state.fossilUsage);\n\n    const emission = calculateFossilEmissions(usage);\n    \n    yield put(FossilEmissionActions.SetFossilEmissionsResult(emission));\n};\n\nexport const FossilEmissionSagas = [\n    takeEvery(FossilUsageActions.PatchTransportUsageType, computeFossilEmissionSaga)\n];","import { all } from 'redux-saga/effects';\nimport { NavigationSagas } from './navigation.sagas';\nimport { FossilEmissionSagas } from './fossil-emission.sagas';\n\nexport function* RootSaga() {\n    yield all([\n        ...NavigationSagas,\n        ...FossilEmissionSagas\n    ]);\n}","export * from './actions';\nexport * from './constants';\n\nimport { applyMiddleware, compose, createStore, Store } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { AppState, InitialAppState } from './constants';\nimport { RootReducer } from './reducers';\nimport { RootSaga } from './sagas';\n\nconst composeEnhancers = (window as any)['__REDUX_DEVTOOLS_EXTENSION_COMPOSE__'] || compose;\n\nexport const configureStore = (initialState: AppState = InitialAppState): Store<AppState> => {\n    const sagaMiddleware = createSagaMiddleware();\n\n    const store: any = createStore(RootReducer, composeEnhancers(applyMiddleware(sagaMiddleware)));\n\n    store.runSagaTask = () => (store.sagaTask = sagaMiddleware.run(RootSaga as any));\n\n    store.runSagaTask();\n\n    return store;\n};","import React from 'react';\n\nexport const EmissionsChart = ({ emission, limit, label }) => {\n    const transportPerc = emission.transport / limit * 100;\n    const consumptionPerc = emission.consumption / limit * 100;\n\n    return (\n        <div className=\"d-flex flex-column justify-content-end align-items-center\" style={{ height: 300, width: 80 }}>\n            <strong className=\"text-center\">{ label }</strong>\n            <small>{Math.round(emission.result)} ton CO2</small>\n            <div className=\"chart-segment\" style={{ height: `${transportPerc}%`, width: '100%', backgroundColor: 'red' }}></div>\n            <div className=\"chart-segment\" style={{ height: `${consumptionPerc}%`, width: '100%', backgroundColor: 'green' }}></div>\n        </div>\n    );\n}","import classnames from 'classnames';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Input, InputGroup, InputGroupAddon, Nav, NavItem, NavLink } from 'reactstrap';\nimport { bindActionCreators } from 'redux';\nimport { AppState, NavigationActions, Section, FossilUsageActions } from '../../state';\nimport { FossilUsageResult } from '../../fossil-usage';\nimport { EmissionsChart } from './EmissionsChart';\n\nconst SECTIONS = [Section.Welcome, Section.Transport];\n\nclass _NavigationSections extends React.Component<any> {\n    render() {\n        const { activeSection, setSection, transport, patchTransportUsage, fossilEmission } = this.props;\n\n        const refEmissions = { consumption: 6, transport: 19, result: 25};\n        const maxEmission = 1.5 * Math.max(refEmissions.result, fossilEmission.result);\n\n        return (\n            <React.Fragment>\n                <Nav tabs className=\"mt-5\">\n                    {\n                        SECTIONS.map(section => (\n                            <NavItem key={section}>\n                                <NavLink\n                                    className={classnames({ active: activeSection === section })}\n                                    onClick={() => setSection(section)}>\n                                    {section}\n                                </NavLink>\n                            </NavItem>\n                        ))\n                    }\n                </Nav>\n                <div className=\"row p-3\">\n                    <div className=\"col-6\">\n                        <InputGroup>\n                            <InputGroupAddon addonType=\"prepend\">km</InputGroupAddon>\n                            <Input placeholder=\"Car travel per week\" type=\"number\" step=\"1\"\n                                value={transport.carKmPerWeek}\n                                onChange={event => patchTransportUsage({ carKmPerWeek: event.currentTarget.value })} />\n                        </InputGroup>\n                    </div>\n                    <div className=\"col-3 d-flex flex-column align-items-center\">\n                        <EmissionsChart emission={fossilEmission} limit={maxEmission} label='You' />\n                    </div>\n                    <div className=\"col-3 d-flex flex-column align-items-center\">\n                        <EmissionsChart emission={refEmissions} limit={maxEmission} label='Avg' />\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nfunction mapStateToProps({ navigation, fossilUsage, fossilEmission }: AppState) {\n    return {\n        activeSection: navigation.section,\n        transport: fossilUsage.transport,\n        fossilEmission: fossilEmission\n    };\n};\n\nfunction mapDispatchToProps(dispatch: any) {\n    return bindActionCreators(\n        {\n            setSection: NavigationActions.SetNavigationSection,\n            patchTransportUsage: FossilUsageActions.PatchTransportUsage\n        },\n        dispatch\n    );\n}\n\nexport const NavigationSections = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(_NavigationSections);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { I18n } from 'react-i18nify';\n\nimport './style/style.scss';\n\nimport { NavigationHeader } from './navigation/components/NavigationHeader';\nimport { Page } from './core/components/Page';\nimport { WelcomePage } from './core/components/WelcomePage';\nimport { NavigationSections } from './navigation/components/NavigationSections';\n\nclass App extends Component {\n    componentDidMount() {\n        document.title = I18n.t('application.title');\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <NavigationHeader />\n                <Page>\n                    <NavigationSections />\n                    <WelcomePage title={I18n.t('application.title')} />\n                </Page>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default connect()(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { I18n } from 'react-i18nify';\n\nexport function configureI18n(language: string) {\n    const en = require('./languages/en.json');\n    const pl = require('./languages/pl.json');\n    \n    I18n.setTranslations({ en, pl });\n    \n    I18n.setLocale(language);\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { configureI18n } from './i18n';\nimport { configureStore } from './state';\nimport { Provider } from 'react-redux';\n\nconfigureI18n('pl');\n\nReactDOM.render(<Provider store={configureStore()}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}